# Copyright 2020 Bateared Collie
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this 
#   list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this 
#   list of conditions and the following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may 
#   be used to endorse or promote products derived from this software without specific
#   prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



#This file is used by CMake when finding SeisTK. It provides the STK module
#API.
#
#The following variables are provided by this module:
#
#  * `STK_VERSION`: The version of VTK found.
#  * `STK_MAJOR_VERSION`: The major version of STK found.
#  * `STK_MINOR_VERSION`: The minor version of STK found.
#  * `STK_BUILD_VERSION`: The build version of STK found.
#  * `STK_AVAILABLE_COMPONENTS`: Components available with STK.
#  * `STK_PREFIX_PATH`: Install prefix for VTK.
#  * `STK_WRAP_PYTHON`: If STK itself provides Python wrapping. If so, the
#    Python parts of the module API are available.
#  * `STK_PYTHONPATH`: Where STK's Python modules live inside the install
#    prefix. Unset if Python is not available.
#    
#  * `STK_LIBRARIES`: The list of modules specified by `COMPONENTS` and
#    `OPTIONAL_COMPONENTS`. However, if no components are specified, all
#    available components are added to this variable. This may be used in
#    `MODULES` arguments in the API (e.g., `vtk_module_autoinit`). All modules
#    are also targets and may be linked to using `target_link_libraries`.
#  

cmake_policy(PUSH)
cmake_policy(VERSION 3.8...3.12)

#
# This logic is used by vtk-config.cmake but is probably not required here..
#
#set(_vtk_temp_variables)
#set(_vtk_real_components)
#foreach (_vtk_component IN LISTS "${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS")
#  if (_vtk_component MATCHES "^vtk" AND
#      NOT _vtk_component STREQUAL "vtksys" AND
#      NOT _vtk_component STREQUAL "vtkjava")
#    string(SUBSTRING "${_vtk_component}" 3 -1 _vtk_actual_component)
#    if (NOT ${CMAKE_FIND_PACKAGE_NAME}_FIND_VERSION)
#      if (NOT ${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
#        message(DEPRECATION
#          "The new name for the '${_vtk_component}' component is "
#          "'${_vtk_actual_component}'")
#      endif ()
#    elseif (${CMAKE_FIND_PACKAGE_NAME}_FIND_VERSION VERSION_LESS 8.90)
      # Ignore for compatibility.
#    else ()
#      message(FATAL_ERROR
#        "The new name for the '${_vtk_component}' component is "
#        "'${_vtk_actual_component}'. By requesting at least version 8.90, the "
#        "new component names are now required.")
#    endif ()
#    list(APPEND _vtk_real_components
#      "${_vtk_actual_component}")
#    list(APPEND _vtk_temp_variables
#      "${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED_${_vtk_actual_component}")
#    set("${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED_${_vtk_actual_component}"
#      "${${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED_${_vtk_component}}")
#    unset(_vtk_actual_component)
#  else ()
#    list(APPEND _vtk_real_components
#      "${_vtk_component}")
#  endif ()
#endforeach ()
#unset(_vtk_component)
#set("${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS"
#  ${_vtk_real_components})
#unset(_vtk_real_components)
#
set("${CMAKE_FIND_PACKAGE_NAME}_CMAKE_MODULE_PATH_save" "${CMAKE_MODULE_PATH}")
list(INSERT CMAKE_MODULE_PATH 0  "${CMAKE_CURRENT_LIST_DIR}")

set("${CMAKE_FIND_PACKAGE_NAME}_CMAKE_PREFIX_PATH_save" "${CMAKE_PREFIX_PATH}")
include("${CMAKE_CURRENT_LIST_DIR}/stk-prefix.cmake")
set("${CMAKE_FIND_PACKAGE_NAME}_PREFIX_PATH"  "${_vtk_module_import_prefix}")

unset(_vtk_module_import_prefix)
list(INSERT CMAKE_PREFIX_PATH 0  "${${CMAKE_FIND_PACKAGE_NAME}_PREFIX_PATH}")

set("${CMAKE_FIND_PACKAGE_NAME}_VERSION" "@STK_MAJOR_VERSION@.@STK_MINOR_VERSION@.@STK_BUILD_VERSION@")
set("${CMAKE_FIND_PACKAGE_NAME}_MAJOR_VERSION" "@STK_MAJOR_VERSION@")
set("${CMAKE_FIND_PACKAGE_NAME}_MINOR_VERSION" "@STK_MINOR_VERSION@")
set("${CMAKE_FIND_PACKAGE_NAME}_BUILD_VERSION" "@STK_BUILD_VERSION@")
set("${CMAKE_FIND_PACKAGE_NAME}_LEGACY_REMOVE" "@STK_LEGACY_REMOVE@")
set("${CMAKE_FIND_PACKAGE_NAME}_AUTOINIT_INCLUDE" "\"vtkAutoInit.h\"")

set("${CMAKE_FIND_PACKAGE_NAME}_AVAILABLE_COMPONENTS" "@stk_all_components@")

unset("${CMAKE_FIND_PACKAGE_NAME}_FOUND")

include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}-targets.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}-vtk-module-properties.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/stk-find-package-helpers.cmake" OPTIONAL)
include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}-vtk-module-find-packages.cmake")


## Not sure we need this...
#include("${CMAKE_CURRENT_LIST_DIR}/vtkModule.cmake")
#include("${CMAKE_CURRENT_LIST_DIR}/vtkEncodeString.cmake")
#include("${CMAKE_CURRENT_LIST_DIR}/vtkHashSource.cmake")
#include("${CMAKE_CURRENT_LIST_DIR}/vtkObjectFactory.cmake")
#include("${CMAKE_CURRENT_LIST_DIR}/vtkModuleJson.cmake")

set("${CMAKE_FIND_PACKAGE_NAME}_PYTHON_VERSION" "@stk_python_version@")
set("${CMAKE_FIND_PACKAGE_NAME}_WRAP_PYTHON" "@ENABLE_PYTHON@")
if (${CMAKE_FIND_PACKAGE_NAME}_WRAP_PYTHON)
  
  # Not sure about this..
  include("${CMAKE_CURRENT_LIST_DIR}/STKPython-targets.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}/stk-vtk-python-module-properties.cmake")
  
  # Hopefully not nec..
  #include("${CMAKE_CURRENT_LIST_DIR}/vtkModuleWrapPython.cmake")
  
  set("${CMAKE_FIND_PACKAGE_NAME}_PYTHONPATH" "@STK_PYTHON_SITE_PACKAGES_SUFFIX@")
endif ()

#TODO - enable this some other time..
#set("${CMAKE_FIND_PACKAGE_NAME}_WRAP_JAVA" "@STK_WRAP_JAVA@")
#if (${CMAKE_FIND_PACKAGE_NAME}_WRAP_JAVA)
#  include("${CMAKE_CURRENT_LIST_DIR}/vtkModuleWrapJava.cmake")
#
#  if (@VTK_JAVA_JOGL_COMPONENT@) # VTK_JAVA_JOGL_COMPONENT
#    set(_vtk_find_jogl_args)
#    if (${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
#      list(APPEND _vtk_find_jogl_args QUIET)
#    endif ()
#    find_package(JOGL ${_vtk_find_jogl_args})
#    unset(_vtk_find_jogl_args)
#
#    if (JOGL_FOUND)
#      include("${CMAKE_CURRENT_LIST_DIR}/VTKJava-targets.cmake")
#      set("${CMAKE_FIND_PACKAGE_NAME}_vtkjava_FOUND" 1)
#    else ()
#      set("${CMAKE_FIND_PACKAGE_NAME}_vtkjava_FOUND" 0)
#      set("${CMAKE_FIND_PACKAGE_NAME}_vtkjava_NOT_FOUND_MESSAGE"
#        "JOGL was not found")
#    endif ()
#  endif ()
#endif ()

set(_vtk_components_to_check)
foreach (_vtk_component IN LISTS "${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS")
  if (DEFINED "${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_FOUND")
    # It was already not-found (likely due to `find-package` failures).
  elseif (TARGET "${CMAKE_FIND_PACKAGE_NAME}::${_vtk_component}")
    list(APPEND _vtk_components_to_check "${_vtk_component}")
  else ()
    set("${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_FOUND" 0)
    list(APPEND "${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_NOT_FOUND_MESSAGE"
      "The ${_vtk_component} component is not available.")
  endif ()
endforeach ()
unset(_vtk_component)

while (_vtk_components_to_check)
  list(GET _vtk_components_to_check 0 _vtk_component)
  list(REMOVE_AT _vtk_components_to_check 0)
  if (DEFINED "${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_FOUND")
    # We've already made a determiniation.
    continue ()
  endif ()

  get_property(_vtk_public_dependencies
    TARGET    "${CMAKE_FIND_PACKAGE_NAME}::${_vtk_component}"
    PROPERTY  "INTERFACE_vtk_module_depends")
  get_property(_vtk_private_dependencies
    TARGET    "${CMAKE_FIND_PACKAGE_NAME}::${_vtk_component}"
    PROPERTY  "INTERFACE_vtk_module_private_depends")
  get_property(_vtk_optional_dependencies
    TARGET    "${CMAKE_FIND_PACKAGE_NAME}::${_vtk_component}"
    PROPERTY  "INTERFACE_vtk_module_optional_depends")
  set(_vtk_dependencies
    ${_vtk_public_dependencies}
    ${_vtk_private_dependencies})
  foreach (_vtk_optional_dependency IN LISTS _vtk_optional_dependencies)
    if (TARGET "${_vtk_optional_dependency}")
      list(APPEND _vtk_dependencies
        "${_vtk_optional_dependency}")
    endif ()
  endforeach ()
  unset(_vtk_public_dependencies)
  unset(_vtk_private_dependencies)
  unset(_vtk_optional_dependency)
  unset(_vtk_optional_dependencies)

  string(REPLACE "${CMAKE_FIND_PACKAGE_NAME}::" "" _vtk_dependencies "${_vtk_dependencies}")
  set(_vtk_all_dependencies_checked TRUE)
  foreach (_vtk_dependency IN LISTS _vtk_dependencies)
    if (DEFINED "${CMAKE_FIND_PACKAGE_NAME}_${_vtk_dependency}_FOUND")
      if (NOT ${CMAKE_FIND_PACKAGE_NAME}_${_vtk_dependency}_FOUND)
        set("${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_FOUND" 0)
        list(APPEND "${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_NOT_FOUND_MESSAGE"
          "Failed to find the ${_vtk_dependency} component.")
      endif ()
    else ()
      # Check its dependencies.
      list(APPEND _vtk_components_to_check
        "${_vtk_dependency}")
      set(_vtk_all_found FALSE)
    endif ()
  endforeach ()
  if (NOT DEFINED "${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_FOUND")
    if (_vtk_all_dependencies_checked)
      set("${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_FOUND" 1)
    else ()
      list(APPEND _vtk_components_to_check
        "${_vtk_component}")
    endif ()
  endif ()
  unset(_vtk_all_dependencies_checked)
  unset(_vtk_dependency)
  unset(_vtk_dependencies)
endwhile ()
unset(_vtk_component)
unset(_vtk_components_to_check)

set(_vtk_missing_components)
foreach (_vtk_component IN LISTS "${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS")
  if (NOT ${CMAKE_FIND_PACKAGE_NAME}_${_vtk_component}_FOUND AND ${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED_${_vtk_component})
    list(APPEND _vtk_missing_components      "${_vtk_component}")
  endif ()
endforeach ()

if (_vtk_missing_components)
  list(REMOVE_DUPLICATES _vtk_missing_components)
  list(SORT _vtk_missing_components)
  string(REPLACE ";" ", " _vtk_missing_components "${_vtk_missing_components}")
  set("${CMAKE_FIND_PACKAGE_NAME}_FOUND" 0)
  set("${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE"
    "Could not find the ${CMAKE_FIND_PACKAGE_NAME} package with the following required components: ${_vtk_missing_components}.")
endif ()
unset(_vtk_missing_components)


set("${CMAKE_FIND_PACKAGE_NAME}_LIBRARIES")
if (NOT DEFINED "${CMAKE_FIND_PACKAGE_NAME}_FOUND")
  # If nothing went wrong, we've successfully found the package.
  set("${CMAKE_FIND_PACKAGE_NAME}_FOUND" 1)
  set(_vtk_found_components ${${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS})
  if (NOT _vtk_found_components)
    set(_vtk_found_components ${${CMAKE_FIND_PACKAGE_NAME}_AVAILABLE_COMPONENTS})
  endif ()

#  list(REMOVE_ITEM _vtk_found_components
    # This component needs to always be requested explicitly (it is not a
    # module).
#    vtkjava)

  # Build the `_LIBRARIES` variable.
  foreach (_vtk_component IN LISTS _vtk_found_components)
    list(APPEND "${CMAKE_FIND_PACKAGE_NAME}_LIBRARIES" "${CMAKE_FIND_PACKAGE_NAME}::${_vtk_component}")
  endforeach ()
  unset(_vtk_component)
  unset(_vtk_found_components)
endif ()

set(CMAKE_PREFIX_PATH "${${CMAKE_FIND_PACKAGE_NAME}_CMAKE_PREFIX_PATH_save}")
unset("${CMAKE_FIND_PACKAGE_NAME}_CMAKE_PREFIX_PATH_save")

set(CMAKE_MODULE_PATH "${${CMAKE_FIND_PACKAGE_NAME}_CMAKE_MODULE_PATH_save}")
unset("${CMAKE_FIND_PACKAGE_NAME}_CMAKE_MODULE_PATH_save")

foreach (_vtk_temp_variable IN LISTS _vtk_temp_variables)
  unset("${_vtk_temp_variable}")
endforeach ()
unset(_vtk_temp_variable)
unset(_vtk_temp_variables)

cmake_policy(POP)
